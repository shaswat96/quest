kumar.shaswat practice % export SECRET_WORD=TwelveFactor
kumar.shaswat practice % export APP_IMAGE="public.ecr.aws/XYZ/shaswatpoc:2.0.0"
kumar.shaswat practice % make tf_apply                                              
echo "Running terraform apply"
Running terraform apply
export APP_IMAGE=public.ecr.aws/XYZ/shaswatpoc:2.0.0 export PROV_OPS=create export SECRET_WORD=shaswatpoc2 && bash deploy_script.sh
CLOUD_PLATFORM: aws
PROV_OPS: create
PROV_COMPONENTID: shaswatpoc-1234
APP_IMAGE: public.ecr.aws/XYZ/shaswatpoc:2.0.0
Environment variable APP_IMAGE is set to public.ecr.aws/XYZ/shaswatpoc:2.0.0.
Start AWS config container
Checking S3 Bucket state XXXXX-shaswatpoc-terraform ...
{
    "BucketRegion": "us-east-1",
    "AccessPointAlias": false
}
S3 bucket XXXXX-shaswatpoc-terraform already exists
Provision  shaswatpoc-1234

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Finding hashicorp/aws versions matching "5.69.0"...
- Installing hashicorp/aws v5.69.0...
- Installed hashicorp/aws v5.69.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
create new workspace shaswatpoc-1234
Created and switched to workspace "shaswatpoc-1234"!

You're now on a new, empty workspace. Workspaces isolate their state,
so if you run "terraform plan" Terraform will not see any existing state
for this configuration.
Managing certs...
Create certs if not there...
Secret already exists.
data.aws_secretsmanager_secret.ssl_cert: Reading...
data.aws_secretsmanager_secret.ssl_key: Reading...
data.aws_iam_policy_document.this: Reading...
data.aws_iam_policy_document.this: Read complete after 0s [id=1077804475]
data.aws_secretsmanager_secret.ssl_key: Read complete after 1s [id=ARN:EXAMPLE]
data.aws_secretsmanager_secret_version.ssl_key_version: Reading...
data.aws_secretsmanager_secret.ssl_cert: Read complete after 1s [id=ARN:EXAMPLE]
data.aws_secretsmanager_secret_version.ssl_cert_version: Reading...
data.aws_secretsmanager_secret_version.ssl_key_version: Read complete after 0s [id=ARN:EXAMPLE]
data.aws_secretsmanager_secret_version.ssl_cert_version: Read complete after 0s [id=ARN:EXAMPLE]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_acm_certificate.imported_vault_cert will be created
  + resource "aws_acm_certificate" "imported_vault_cert" {
      + arn                       = (known after apply)
      + certificate_body          = (sensitive value)
      + domain_name               = (known after apply)
      + domain_validation_options = (known after apply)
      + id                        = (known after apply)
      + key_algorithm             = (known after apply)
      + not_after                 = (known after apply)
      + not_before                = (known after apply)
      + pending_renewal           = (known after apply)
      + private_key               = (sensitive value)
      + renewal_eligibility       = (known after apply)
      + renewal_summary           = (known after apply)
      + status                    = (known after apply)
      + subject_alternative_names = (known after apply)
      + tags                      = {
          + "shaswatpoc" = "true"
        }
      + tags_all                  = {
          + "shaswatpoc" = "true"
        }
      + type                      = (known after apply)
      + validation_emails         = (known after apply)
      + validation_method         = (known after apply)
    }

  # aws_ecs_cluster.cluster will be created
  + resource "aws_ecs_cluster" "cluster" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "shaswatpoc-cluster"
      + tags_all = {
          + "shaswatpoc" = "true"
        }
    }

  # aws_ecs_service.shaswatpoc_service will be created
  + resource "aws_ecs_service" "shaswatpoc_service" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = true
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "shaswatpoc-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = {
          + "shaswatpoc" = "true"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = true

      + load_balancer {
          + container_name   = "shaswatpoc-nodeapp"
          + container_port   = 3000
          + target_group_arn = (known after apply)
        }

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }

      + timeouts {
          + create = "4m"
          + delete = "4m"
        }
    }

  # aws_ecs_task_definition.shaswatpoc-nodeapp will be created
  + resource "aws_ecs_task_definition" "shaswatpoc-nodeapp" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "512"
      + execution_role_arn       = (known after apply)
      + family                   = "shaswatpoc-nodeapp"
      + id                       = (known after apply)
      + memory                   = "1024"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "shaswatpoc" = "true"
        }
      + tags_all                 = {
          + "shaswatpoc" = "true"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # aws_iam_policy.execution_policy will be created
  + resource "aws_iam_policy" "execution_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "ShaswatPOC for ECS Task execution and private registry authentication"
      + id               = (known after apply)
      + name             = "shaswatpoc-ecs-execution-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AllowPushingLogsToCloudwatch"
                    },
                  + {
                      + Action   = [
                          + "secretsmanager:GetSecretValue",
                          + "ec2:DescribeInstances",
                          + "secretsmanager:DescribeSecret",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "ARN:EXAMPLE]
                        ]
                      + Sid      = "AllowAccessToSecrets"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "shaswatpoc" = "true"
        }
    }

  # aws_iam_policy.task_policy will be created
  + resource "aws_iam_policy" "task_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "IAM Policy for the ShaswatPOC application to access Secrets"
      + id               = (known after apply)
      + name             = "shaswatpoc-ecs-task-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:CreateLogStream",
                          + "logs:CreateLogGroup",
                          + "logs:PutLogEvents",
                          + "logs:DescribeLogStreams",
                          + "ecs:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "kms:Decrypt",
                          + "secretsmanager:GetSecretValue",
                          + "secretsmanager:DescribeSecret",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "ARN:EXAMPLE]
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "shaswatpoc" = "true"
        }
    }

  # aws_iam_policy_attachment.exec-attach will be created
  + resource "aws_iam_policy_attachment" "exec-attach" {
      + id         = (known after apply)
      + name       = "shaswatpoc-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "shaswatpoc-task-role",
        ]
    }

  # aws_iam_policy_attachment.task-attach will be created
  + resource "aws_iam_policy_attachment" "task-attach" {
      + id         = (known after apply)
      + name       = "shaswatpoc-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "shaswatpoc-task-role",
        ]
    }

  # aws_iam_role.ecs_task_role will be created
  + resource "aws_iam_role" "ecs_task_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "shaswatpoc-task-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + permissions_boundary  = (known after apply)
      + tags_all              = {
          + "shaswatpoc" = "true"
        }
      + unique_id             = (known after apply)
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"       = "shaswatpoc-igw"
          + "shaswatpoc" = "true"
        }
      + tags_all = {
          + "Name"       = "shaswatpoc-igw"
          + "shaswatpoc" = "true"
        }
      + vpc_id   = (known after apply)
    }

  # aws_lb.shaswatpoc_alb will be created
  + resource "aws_lb" "shaswatpoc_alb" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "shaswatpoc-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "shaswatpoc" = "true"
        }
      + tags_all                                                     = {
          + "shaswatpoc" = "true"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)
    }

  # aws_lb_listener.https_listener will be created
  + resource "aws_lb_listener" "https_listener" {
      + arn               = (known after apply)
      + certificate_arn   = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 443
      + protocol          = "HTTPS"
      + ssl_policy        = "ELBSecurityPolicy-TLS13-1-3-2021-06"
      + tags              = {
          + "shaswatpoc" = "true"
        }
      + tags_all          = {
          + "shaswatpoc" = "true"
        }

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_lb_target_group.shaswatpoc_tg will be created
  + resource "aws_lb_target_group" "shaswatpoc_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "shaswatpoc-nodeapp-tg"
      + name_prefix                        = (known after apply)
      + port                               = 3000
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "shaswatpoc" = "true"
        }
      + tags_all                           = {
          + "shaswatpoc" = "true"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)
    }

  # aws_route_table.route will be created
  + resource "aws_route_table" "route" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "shaswatpoc" = "true"
        }
      + tags_all         = {
          + "shaswatpoc" = "true"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.route_association will be created
  + resource "aws_route_table_association" "route_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.route_association2 will be created
  + resource "aws_route_table_association" "route_association2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_secretsmanager_secret.secret_word will be created
  + resource "aws_secretsmanager_secret" "secret_word" {
      + arn                            = (known after apply)
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + name                           = "shaswatpoc-secret-word"
      + name_prefix                    = (known after apply)
      + policy                         = (known after apply)
      + recovery_window_in_days        = 0
      + tags_all                       = {
          + "shaswatpoc" = "true"
        }
    }

  # aws_secretsmanager_secret_version.secret_word_version will be created
  + resource "aws_secretsmanager_secret_version" "secret_word_version" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + secret_id      = (known after apply)
      + secret_string  = (sensitive value)
      + version_id     = (known after apply)
      + version_stages = (known after apply)
    }

  # aws_security_group.shaswat_sg will be created
  + resource "aws_security_group" "shaswat_sg" {
      + arn                    = (known after apply)
      + description            = "Security group for ECS task"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "100.64.0.0/16",
                ]
              + description      = "VPC services"
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3000
            },
          + {
              + cidr_blocks      = [
                  + "49.37.117.223/32",
                ]
              + description      = "Allow requsts from private subnet CIDR"
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3000
            },
          + {
              + cidr_blocks      = [
                  + "49.37.117.223/32",
                ]
              + description      = "Allow requsts from private subnet CIDR"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = []
              + description      = "Allow incoming requests in port 20000 to register with Consul server"
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = true
              + to_port          = 3000
            },
          + {
              + cidr_blocks      = []
              + description      = "Allow incoming requests in port 20000 to register with Consul server"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = true
              + to_port          = 443
            },
        ]
      + name                   = "shaswatpoc-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = {
          + "shaswatpoc" = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group_rule.shaswat_sg_rule will be created
  + resource "aws_security_group_rule" "shaswat_sg_rule" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allow Egress traffic for any"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # aws_subnet.private_subnet1 will be created
  + resource "aws_subnet" "private_subnet1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/17"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"       = "shaswatpoc-private_subnet1"
          + "shaswatpoc" = "true"
        }
      + tags_all                                       = {
          + "Name"       = "shaswatpoc-private_subnet1"
          + "shaswatpoc" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnet1 will be created
  + resource "aws_subnet" "public_subnet1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.128.0/18"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"       = "shaswatpoc-public_subnet1"
          + "shaswatpoc" = "true"
        }
      + tags_all                                       = {
          + "Name"       = "shaswatpoc-public_subnet1"
          + "shaswatpoc" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnet2 will be created
  + resource "aws_subnet" "public_subnet2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.192.0/18"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"       = "shaswatpoc-public_subnet2"
          + "shaswatpoc" = "true"
        }
      + tags_all                                       = {
          + "Name"       = "shaswatpoc-public_subnet2"
          + "shaswatpoc" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name"       = "shaswatpoc-vpc"
          + "shaswatpoc" = "true"
        }
      + tags_all                             = {
          + "Name"       = "shaswatpoc-vpc"
          + "shaswatpoc" = "true"
        }
    }

Plan: 24 to add, 0 to change, 0 to destroy.
aws_iam_policy.task_policy: Creating...
aws_iam_policy.execution_policy: Creating...
aws_secretsmanager_secret.secret_word: Creating...
aws_ecs_cluster.cluster: Creating...
aws_vpc.main: Creating...
aws_acm_certificate.imported_vault_cert: Creating...
aws_iam_policy.task_policy: Creation complete after 2s [id=ARN:EXAMPLE]
aws_iam_role.ecs_task_role: Creating...
aws_iam_policy.execution_policy: Creation complete after 2s [id=ARN:EXAMPLE]
aws_secretsmanager_secret.secret_word: Creation complete after 2s [id=ARN:EXAMPLE]
aws_secretsmanager_secret_version.secret_word_version: Creating...
aws_acm_certificate.imported_vault_cert: Creation complete after 2s [id=ARN:EXAMPLE]
aws_secretsmanager_secret_version.secret_word_version: Creation complete after 1s [id=ARN:EXAMPLE]
aws_iam_role.ecs_task_role: Creation complete after 1s [id=shaswatpoc-task-role]
aws_iam_policy_attachment.task-attach: Creating...
aws_iam_policy_attachment.exec-attach: Creating...
aws_ecs_task_definition.shaswatpoc-nodeapp: Creating...
aws_iam_policy_attachment.task-attach: Creation complete after 1s [id=shaswatpoc-attachment]
aws_iam_policy_attachment.exec-attach: Creation complete after 1s [id=shaswatpoc-attachment]
aws_ecs_task_definition.shaswatpoc-nodeapp: Creation complete after 2s [id=shaswatpoc-nodeapp]
aws_vpc.main: Creation complete after 5s [id=vpc-03af51af48465c614]
aws_internet_gateway.igw: Creating...
aws_subnet.public_subnet1: Creating...
aws_subnet.private_subnet1: Creating...
aws_subnet.public_subnet2: Creating...
aws_lb_target_group.shaswatpoc_tg: Creating...
aws_security_group.shaswat_sg: Creating...
aws_subnet.private_subnet1: Creation complete after 2s [id=subnet-07a3e319a93b6d84c]
aws_internet_gateway.igw: Creation complete after 2s [id=igw-00d5333b545a5dfa6]
aws_route_table.route: Creating...
aws_subnet.public_subnet2: Creation complete after 2s [id=subnet-0e249efe1f0d04b98]
aws_subnet.public_subnet1: Creation complete after 2s [id=subnet-06b2e5dad6b446d56]
aws_lb_target_group.shaswatpoc_tg: Creation complete after 4s [id=ARN:EXAMPLE]
aws_route_table.route: Creation complete after 3s [id=rtb-088aaa28ff51d5254]
aws_route_table_association.route_association2: Creating...
aws_route_table_association.route_association: Creating...
aws_security_group.shaswat_sg: Creation complete after 5s [id=sg-0ad996b761f868824]
aws_security_group_rule.shaswat_sg_rule: Creating...
aws_lb.shaswatpoc_alb: Creating...
aws_ecs_cluster.cluster: Still creating... [10s elapsed]
aws_security_group_rule.shaswat_sg_rule: Creation complete after 1s [id=sgrule-216183670]
aws_route_table_association.route_association: Creation complete after 1s [id=rtbassoc-0d9698fda9a49eb2b]
aws_route_table_association.route_association2: Creation complete after 1s [id=rtbassoc-09604342d998ad30b]
aws_ecs_cluster.cluster: Creation complete after 14s [id=ARN:EXAMPLE]
aws_ecs_service.shaswatpoc_service: Creating...
aws_lb.shaswatpoc_alb: Still creating... [10s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [10s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [20s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [20s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [30s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [30s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [40s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [40s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [50s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [50s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [1m0s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [1m0s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [1m10s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [1m10s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [1m20s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [1m20s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [1m30s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [1m30s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [1m40s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [1m40s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [1m50s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [1m50s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [2m0s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [2m0s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [2m10s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [2m10s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [2m20s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [2m20s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [2m30s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [2m30s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [2m40s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [2m40s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [2m50s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [2m50s elapsed]
aws_lb.shaswatpoc_alb: Still creating... [3m0s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [3m0s elapsed]
aws_lb.shaswatpoc_alb: Creation complete after 3m9s [id=ARN:EXAMPLE]
aws_lb_listener.https_listener: Creating...
aws_lb_listener.https_listener: Creation complete after 2s [id=ARN:EXAMPLE]
aws_ecs_service.shaswatpoc_service: Still creating... [3m10s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [3m20s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [3m30s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [3m40s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [3m50s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [4m0s elapsed]
aws_ecs_service.shaswatpoc_service: Still creating... [4m10s elapsed]
aws_ecs_service.shaswatpoc_service: Creation complete after 4m13s [id=ARN:EXAMPLE]

Apply complete! Resources: 24 added, 0 changed, 0 destroyed.

Outputs:

ecs_cluster_arn = "ARN:EXAMPLE]
ecs_service = {
  "alarms" = tolist([])
  "capacity_provider_strategy" = toset([])
  "cluster" = "ARN:EXAMPLE]
  "deployment_circuit_breaker" = tolist([
    {
      "enable" = false
      "rollback" = false
    },
  ])
  "deployment_controller" = tolist([
    {
      "type" = "ECS"
    },
  ])
  "deployment_maximum_percent" = 200
  "deployment_minimum_healthy_percent" = 100
  "desired_count" = 1
  "enable_ecs_managed_tags" = true
  "enable_execute_command" = false
  "force_delete" = tobool(null)
  "force_new_deployment" = tobool(null)
  "health_check_grace_period_seconds" = 0
  "iam_role" = "/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
  "id" = "ARN:EXAMPLE]
  "launch_type" = "FARGATE"
  "load_balancer" = toset([
    {
      "container_name" = "shaswatpoc-nodeapp"
      "container_port" = 3000
      "elb_name" = ""
      "target_group_arn" = "ARN:EXAMPLE]
    },
  ])
  "name" = "shaswatpoc-service"
  "network_configuration" = tolist([
    {
      "assign_public_ip" = true
      "security_groups" = toset([
        "sg-0ad996b761f868824",
      ])
      "subnets" = toset([
        "subnet-06b2e5dad6b446d56",
        "subnet-0e249efe1f0d04b98",
      ])
    },
  ])
  "ordered_placement_strategy" = tolist([])
  "placement_constraints" = toset([])
  "platform_version" = "LATEST"
  "propagate_tags" = "NONE"
  "scheduling_strategy" = "REPLICA"
  "service_connect_configuration" = tolist([])
  "service_registries" = tolist([])
  "tags" = tomap({})
  "tags_all" = tomap({
    "shaswatpoc" = "true"
  })
  "task_definition" = "ARN:EXAMPLE]
  "timeouts" = {
    "create" = "4m"
    "delete" = "4m"
    "update" = tostring(null)
  }
  "triggers" = tomap({})
  "volume_configuration" = tolist([])
  "wait_for_steady_state" = true
}
ecs_task_definition = "ARN:EXAMPLE]
loadbalancer = "shaswatpoc-alb-595618819.us-east-1.elb.amazonaws.com"
targetgroup = {
  "arn" = "ARN:EXAMPLE]
  "arn_suffix" = "targetgroup/shaswatpoc-nodeapp-tg/eca1d14ec5c3be9a"
  "connection_termination" = tobool(null)
  "deregistration_delay" = "300"
  "health_check" = tolist([
    {
      "enabled" = true
      "healthy_threshold" = 5
      "interval" = 30
      "matcher" = "200"
      "path" = "/"
      "port" = "traffic-port"
      "protocol" = "HTTP"
      "timeout" = 5
      "unhealthy_threshold" = 2
    },
  ])
  "id" = "ARN:EXAMPLE]
  "ip_address_type" = "ipv4"
  "lambda_multi_value_headers_enabled" = false
  "load_balancer_arns" = toset([
    "ARN:EXAMPLE]
  ])
  "load_balancing_algorithm_type" = "round_robin"
  "load_balancing_anomaly_mitigation" = "off"
  "load_balancing_cross_zone_enabled" = "use_load_balancer_configuration"
  "name" = "shaswatpoc-nodeapp-tg"
  "name_prefix" = ""
  "port" = 3000
  "preserve_client_ip" = tostring(null)
  "protocol" = "HTTP"
  "protocol_version" = "HTTP1"
  "proxy_protocol_v2" = false
  "slow_start" = 0
  "stickiness" = tolist([
    {
      "cookie_duration" = 86400
      "cookie_name" = ""
      "enabled" = false
      "type" = "lb_cookie"
    },
  ])
  "tags" = tomap({
    "shaswatpoc" = "true"
  })
  "tags_all" = tomap({
    "shaswatpoc" = "true"
  })
  "target_failover" = tolist([
    {
      "on_deregistration" = tostring(null)
      "on_unhealthy" = tostring(null)
    },
  ])
  "target_group_health" = tolist([
    {
      "dns_failover" = tolist([
        {
          "minimum_healthy_targets_count" = "1"
          "minimum_healthy_targets_percentage" = "off"
        },
      ])
      "unhealthy_state_routing" = tolist([
        {
          "minimum_healthy_targets_count" = 1
          "minimum_healthy_targets_percentage" = "off"
        },
      ])
    },
  ])
  "target_health_state" = tolist([
    {
      "enable_unhealthy_connection_termination" = tobool(null)
      "unhealthy_draining_interval" = tonumber(null)
    },
  ])
  "target_type" = "ip"
  "vpc_id" = "vpc-03af51af48465c614"
}

